{
    "React Typescript Component": {
        "prefix": "rtc",
        "body": [
            "export interface ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props extends Atom<{}> {",
            "}",
            "",
            "export const ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}: Atom<${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props> = ({ className }) => {",
            "    return (",
            "        <div",
            "            {...props}",
            "            className={classNames('${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}', className)}",
            "        >",
            "        </div>",
            "    )",
            "}",
            "",
            "export default ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}"
        ],
        "description": "React Typescript Component"
    },
    "React Typescript Init Component": {
        "prefix": "atoms",
        "body": [
            "import { cn } from \"core\"",
            "export interface ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props { }",
            "",
            "export interface ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Atom extends Atom<${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props> { }",
            "",
            "export const ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}: ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Atom = (props) => {",
            "    return (",
            "        <div className={cn('${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}', props.className)}>",
            "           ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}",
            "        </div>",
            "    )",
            "}",
            "",
            "export default ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}"
        ],
        "description": "React Typescript Component"
    },
    "Generate new Page": {
        "prefix": "page",
        "body": [
            "import ${1:Page}Template from 'components/templates/${1:Page}Template'",
            "",
            "const ${1:Page}Page = () => {",
            "    return <${1:Page}Template />",
            "}",
            "",
            "export default ${1:Page}Page"
        ],
        "description": "Generate new Page"
    },
    "Generate new Template": {
        "prefix": "template",
        "body": [
            "import classNames from \"classnames\"",
            "import \"./style.scss\"",
            "",
            "",
            "export interface ${1:Page}TemplateProps { }",
            "",
            "export const ${1:Page}Template: Atom<${1:Page}TemplateProps> = ({ context, className, ...props }) => {",
            "",
            "    return (",
            "        <div",
            "            {...props}",
            "            className={classNames('${1:Page}Template', className)}",
            "        >",
            "        </div>",
            "    )",
            "}",
            "",
            "export default ${1:Page}Template"
        ],
        "description": "Generate new Template"
    },
    "Generate new Style Atoms": {
        "prefix": "style",
        "body": [
            "@import 'assets/style/import';",
            "",
            ".${1:ClassName}{",
            "    ",
            "}"
        ],
        "description": "Generate new Style Atoms"
    },
    "Generate new router": {
        "prefix": "router",
        "body": [
            "{",
            "    path: '/',",
            "    exact: true,",
            "    component: lazy(() => import('../pages/${1:Component}')),",
            "    name: '${1:Component}'",
            "}"
        ],
        "description": "Generate new router"
    },
    "Generate new service": {
        "prefix": "service",
        "body": [
            "import { ${1:API_URL} } from \"constant/api\"",
            "import { http } from \"lib/cbi-react-core\"",
            "const api = ${1:API_URL}",
            "",
            "const ${2:name}Service = {",
            "    get() {",
            "        return http.get<HttpResponse>(`\\${api}/api`)",
            "    },",
            "}",
            "",
            "export default ${2:name}Service"
        ],
        "description": "Generate new service"
    },
    "Generate Nextjs Page": {
        "prefix": "npage",
        "body": [
            "import { get${2:Layout} } from \"components/layouts\"",
            "import { ${1:Page}Template } from \"components/templates\"",
            "",
            "const ${1:Page} = () => {",
            "",
            "    return <${1:Page}Template />",
            "}",
            "",
            "${1:Page}.getLayout = get${2:Layout}",
            "",
            "export default ${1:Page}"
        ],
        "description": "Generate Nextjs Page"
    },
    "Generate No Authen": {
        "prefix": "nnoauthen",
        "body": [
            "export const getServerSideProps = withNoAuthen(async (context) => {",
            "    return {",
            "        props: {}",
            "    }",
            "})"
        ],
        "description": "Generate authen"
    },
    "Generate Authen": {
        "prefix": "nauthen",
        "body": [
            "export const getServerSideProps = withAuthen(async (context) => {",
            "    return {",
            "        props: {}",
            "    }",
            "}, router.welcomeBack)",
            ""
        ],
        "description": "Generate Authen"
    },
    "Generate Next Server side": {
        "prefix": "nserver",
        "body": [
            "export const getServerSideProps : GetServerSideProps = async (context) => {",
            "    return {",
            "        props: {}",
            "    }",
            "}"
        ],
        "description": "Generate Next Server side"
    },
    "Generate Next Static side": {
        "prefix": "nstatic",
        "body": [
            "export const getStaticProps : GetStaticProps = async () => {",
            "    return {",
            "        props: {}",
            "    }",
            "}"
        ],
        "description": "Generate Next Static side"
    },
    "Generate Next path": {
        "prefix": "npath",
        "body": [
            "export const getStaticPaths : GetStaticPaths = async () => {",
            "    return {",
            "        paths: [],",
            "        fallback: false",
            "    }",
            "}"
        ],
        "description": "Generate Next path"
    },
    "Break row comment": {
        "prefix": "my-br",
        "body": ["/*---------------------$1----------------------*/"],
        "description": "Break row comment"
    },
      "Core generate atoms type": {
        "prefix": "cat",
        "body": [
          "/*------------------- ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}} -------------------*/",
          "",
          "export interface ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props extends AtomArg{ }",
          "",
          "export interface ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Atom {",
          "    (props: ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Props): JSX.Element",
          "}",
          "",
          "/*------------------- ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}} -------------------*/",
        ],
        "description": "Core generate atoms type"
      },
      "Tạo style cho atoms": {
        "prefix": "cstyle",
        "body": [
          "import styled from \"styled-components\";",
          "",
          "export const ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Root = styled.div`",
          "    ",
          "`"
        ],
        "description": "Tạo style cho atoms"
      },
      "Core generate atoms": {  
        "prefix": "catoms",
        "body": [
          "import { cn } from \"core\"",
          "import { ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Atom } from \"./type\"",
          "export const ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}: ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}Atom = (props) => {",
          "    return (",
          "        <div className={cn('${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}', props.className)}>",
          "           ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}",
          "        </div>",
          "    )",
          "}",
          "",
          "export default ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}"
        ],
        "description": "Core generate atoms"
      }
}



